# Enginsight Enterprise Helm Chart Values

nameOverride: ""
fullnameOverride: ""

# Enginsight-specific image configuration
images:
  # Image registry for Enginsight services
  registry: registry.enginsight.com
  imagePullSecrets:
    - name: enginsight-registry-secret

# Individual service configurations
services:
  # UI Frontend Service (ui-m1)
  ui:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/ui-m1
      tag: "7.7.4"
      pullPolicy: IfNotPresent
    replicaCount: 1
    port: 80
    ingress:
      enabled: true
      className: traefik
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-http01-prod
      hosts:
        - host: ui-enginsight.188-245-122-8.nip.io
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - secretName: ui-enginsight-tls
          hosts:
            - ui-enginsight.188-245-122-8.nip.io
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 101
    #   runAsGroup: 101
    #   fsGroup: 101
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #     add:
    #       - NET_BIND_SERVICE
    #   readOnlyRootFilesystem: true
    # livenessProbe:
    #   httpGet:
    #     path: /
    #     port: 80
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /
    #     port: 80
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  # API Server Service (server-m2)
  server:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/server-m2
      tag: "7.7.4"
      pullPolicy: IfNotPresent
    replicaCount: 1
    port: 8080
    ingress:
      enabled: true
      className: traefik
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-http01-prod
      hosts:
        - host: api-enginsight.188-245-122-8.nip.io
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls:
        - secretName: api-enginsight-tls
          hosts:
            - api-enginsight.188-245-122-8.nip.io
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  # Microservices
  anomalies:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/anomalies-m28
      tag: "2.3.5"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  generator:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/generator-m35
      tag: "1.15.34"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  historian:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/historian-m38
      tag: "2.3.8"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  profiler:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/profiler-m22
      tag: "2.2.17"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  reporter:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/reporter-m4
      tag: "3.2.4"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  scheduler:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/scheduler-m29
      tag: "1.12.8"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  sentinel:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/sentinel-m3
      tag: "2.27.29"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  themis:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/themis-m43
      tag: "2.1.31"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

  updater:
    enabled: true
    image:
      repository: registry.enginsight.com/enginsight/updater-m34
      tag: "2.4.1"
    replicaCount: 1
    port: 8080
    podLabels: {}
    podAnnotations: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podSecurityContext: {}
    # podSecurityContext:
    #   runAsNonRoot: true
    #   runAsUser: 1000
    #   runAsGroup: 1000
    #   fsGroup: 1000
    securityContext: {}
    # securityContext:
    #   allowPrivilegeEscalation: false
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: false
    resources: {}
    # resources:
    #   limits:
    #     cpu: 100m
    #     memory: 128Mi
    #   requests:
    #     cpu: 100m
    #     memory: 128Mi
    # livenessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 30
    #   periodSeconds: 10
    # readinessProbe:
    #   httpGet:
    #     path: /health
    #     port: 8080
    #   initialDelaySeconds: 5
    #   periodSeconds: 5

# Configuration for services config
config:
  # Services configuration (services-config Secret)
  services:
    existingSecret: "enginsight-services-config"
    # kubectl -n enginsight create secret generic enginsight-services-config --from-file=config.json
    # config.json:
    # {
    #   "onpremise": {
    #     "twoFactor": {
    #       "enabled": false
    #     }
    #   },
    #   "api": {
    #     "url": "%%API_URL%%",
    #     "port": 8080,
    #     "timeout": 5000,
    #     "clientMaxBodySize": "50mb",
    #     "cookies": {
    #       "maxAge": 3600000,
    #       "domain": "",
    #       "path": "/",
    #       "signed": false
    #     },
    #     "recaptcha": {
    #       "secret": "",
    #       "host": "www.google.com",
    #       "path": "/recaptcha/api/siteverify",
    #       "method": "POST"
    #     },
    #     "headers": {},
    #     "jwt": {
    #       "secret": "%%JWT_SECRET%%",
    #       "expiresIn": "24h"
    #     }
    #   },
    #   "loopDelay": 15000,
    #   "database": {
    #     "uriConnectionString": "%%MONGODB_URI%%"
    #   },
    #   "cache": "redis-master",
    #   "email": {
    #     "sender": "'Enginsight' <no-reply@your.domain>",
    #     "host": "",
    #     "port": "",
    #     "sslTls": true,
    #     "user": "",
    #     "pass": "",
    #     "maxConnections": 2,
    #     "rateDelta": 1000,
    #     "rateLimit": 1
    #   },
    #   "integrations": {
    #     "slack": {
    #       "clientId": "",
    #       "clientSecret": ""
    #     }
    #   },
    #   "cves": {
    #     "uriConnectionString": "mongodb://mongodb-cves/cves"
    #   },
    #   "app": {
    #     "host": "%%APP_URL%%"
    #   },
    #   "sms": {
    #     "limit": 20,
    #     "region": "",
    #     "accessKeyId": "",
    #     "secretAccessKey": "",
    #     "senderId": ""
    #   }
    # }

  # UI configuration (ui-config ConfigMap)
  ui:
    hinting: true
    modulePrefix: "ngs-ui-m1"
    environment: "production"
    rootURL: "/"
    locationType: "auto"
    recaptchaKey: ""
    onpremise:
      version: 1

# Service Account configuration
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Network policies configuration
networkPolicies:
  # Master switch for network policies
  enabled: false

# MongoDB dependency configuration - disable if external backends are being used
mongodb:
  enabled: true
  architecture: "replicaset"
  auth:
    enabled: false
    existingSecret: ""
    rootUser: "root"
    rootPassword: ""
    usernames: []
    passwords: []
    databases: []
  arbiter:
    enabled: false
  replicaCount: 1

mongodb-cves:
  enabled: true
  architecture: "replicaset"
  auth:
    enabled: false
    existingSecret: ""
    rootUser: "root"
    rootPassword: ""
    usernames: []
    passwords: []
    databases: []
  arbiter:
    enabled: false
  replicaCount: 1
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1.5Gi"

# Redis dependency configuration
redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: false
    existingSecret: ""
    existingSecretPasswordKey: ""
    password: ""
  master:
    persistence:
      enabled: false
